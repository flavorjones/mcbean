#!/usr/bin/env ruby

require 'open-uri'
require 'rubygems'
require 'mcbean'
require 'getoptlong'

SCRIPT = File.basename(__FILE__)

OPTS = [
  [ '--markdown',       '-m', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--html',           '-h', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--to-markdown',    '-M', GetoptLong::NO_ARGUMENT ],
  [ '--to-html',        '-H', GetoptLong::NO_ARGUMENT ]
]

@input_format  = "html"
@output_format = "markdown"
@input_file    = nil

def _usage
  puts "USAGE: #{SCRIPT} [--<FROM-FORMAT>=]<FILE-OR-URL> [--to-<TO-FORMAT>]"
  puts
  puts "     McBean transforms file formats for your reading pleasure."
  puts
  puts "     e.g.:"
  puts "       #{SCRIPT} --html=http://en.wikipedia.org/wiki/The_Sneetches_and_Other_Stories --to-markdown"
  puts "       #{SCRIPT} --markdown=sneetches.md --to-html"
  puts
  puts "     If no FROM-FORMAT option is specified, --#{@input_format} is assumed"
  puts "     If no TO-FORMAT option is specified, --to-#{@output_format} is assumed"
  puts
  puts "     Shortcuts:"
  OPTS.each do |long, short, _|
    puts "       #{short} for #{long}"
  end
  exit 1
end

GetoptLong.new(*OPTS).each do |opt, arg|
  case opt
  when "--markdown"
    @input_format = "markdown"
    @input_file   = arg
  when "--html"
    @input_format = "html"
    @input_file   = arg
  when "--to-markdown"
    @output_format = "markdown"
  when "--to-html"
    @output_format = "html"
  else
    _usage
  end
end

if @input_file.nil?
  _usage if ARGV.length != 1
  @input_file = ARGV[0]
end

mcbean = case @input_format
         when "html"
           McBean.document(open(@input_file))
         when "markdown"
           McBean.markdown(open(@input_file))
         end

puts case @output_format
     when "html"
       mcbean.to_html
     when "markdown"
       mcbean.to_markdown
     end

exit 0
